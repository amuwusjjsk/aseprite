name: Build Aseprite on Windows

on: [push, pull_request]

jobs:
  build-windows:
    runs-on: windows-2022

    steps:
    # 1. 检出代码及子模块
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    # 2. 安装构建工具
    - name: Install build tools
      run: |
        choco install cmake ninja -y
        choco install 7zip -y

    # 3. 设置MSVC开发环境
    - name: Setup MSVC environment
      uses: ilammy/msvc-dev-cmd@v1

    # 4. 下载Skia (使用官方链接，含重试机制)
    - name: Download Skia
      shell: bash
      run: |
        SKIA_URL="https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-Windows-Release-x64.zip"
        SKIA_ZIP="skia.zip"
        RETRY_COUNT=3
        
        echo "Downloading Skia from official release: $SKIA_URL"
        
        for ((i=1; i<=$RETRY_COUNT; i++)); do
          echo "Attempt $i of $RETRY_COUNT"
          
          curl -L -o "$SKIA_ZIP" "$SKIA_URL"
          
          FILE_SIZE=$(stat -f%z "$SKIA_ZIP" 2>/dev/null || du -b "$SKIA_ZIP" | cut -f1)
          echo "Downloaded file size: $FILE_SIZE bytes"
          
          if [ "$FILE_SIZE" -gt 1000000 ]; then
            echo "Download completed successfully."
            break
          fi
          
          echo "Download may have failed, file is too small. Retrying in 5 seconds..."
          rm -f "$SKIA_ZIP"
          sleep 5
          
          if [ "$i" -eq "$RETRY_COUNT" ]; then
            echo "ERROR: Failed to download Skia after $RETRY_COUNT attempts."
            exit 1
          fi
        done

    # 5. 解压Skia
    - name: Extract Skia
      shell: bash
      run: |
        echo "Extracting Skia archive..."
        7z x skia.zip -oskia -y
        
        # 验证解压结果
        echo "Contents of skia directory:"
        ls -la skia/
        
        echo "Checking for expected files:"
        if [ -f "skia/out/Release-x64/skia.lib" ]; then
          echo "✓ skia.lib found successfully"
        else
          echo "✗ ERROR: skia.lib not found!"
          echo "Available files in skia/out/Release-x64/:"
          ls -la skia/out/Release-x64/ 2>/dev/null || echo "Directory does not exist"
          exit 1
        fi

    # 6. 查找 libjpeg-turbo 头文件
    - name: Find libjpeg-turbo headers
      shell: bash
      run: |
        echo "Searching for libjpeg-turbo headers in Skia package..."
        
        # 查找 jpeg 相关的头文件
        JPEG_HEADERS=$(find skia -name "j*.h" -o -name "*jpeg*.h" | head -5)
        if [ -n "$JPEG_HEADERS" ]; then
          echo "Found JPEG headers:"
          echo "$JPEG_HEADERS"
          JPEG_INCLUDE_DIR=$(dirname "$(echo "$JPEG_HEADERS" | head -1)")
          echo "JPEG_INCLUDE_DIR=$JPEG_INCLUDE_DIR" >> $GITHUB_ENV
          echo "Using JPEG include directory: $JPEG_INCLUDE_DIR"
        else
          echo "WARNING: No JPEG headers found in Skia package"
          echo "JPEG_INCLUDE_DIR=" >> $GITHUB_ENV
        fi
        
        # 查找 libjpeg 库文件
        JPEG_LIBS=$(find skia -name "*jpeg*.lib" -o -name "libjpeg*.a" | head -3)
        if [ -n "$JPEG_LIBS" ]; then
          echo "Found JPEG libraries:"
          echo "$JPEG_LIBS"
          JPEG_LIBRARY=$(echo "$JPEG_LIBS" | head -1)
          echo "JPEG_LIBRARY=$JPEG_LIBRARY" >> $GITHUB_ENV
          echo "Using JPEG library: $JPEG_LIBRARY"
        else
          echo "WARNING: No JPEG libraries found in Skia package"
          echo "JPEG_LIBRARY=" >> $GITHUB_ENV
        fi

    # 7. 创建构建目录并配置CMake（修复版）
    - name: Configure CMake
      shell: bash
      run: |
        mkdir -p build
        cd build
        
        # 构建CMake命令
        CMAKE_CMD="cmake -G Ninja .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DLAF_BACKEND=skia \
          -DSKIA_DIR=../skia \
          -DSKIA_LIBRARY_DIR=../skia/out/Release-x64 \
          -DSKIA_LIBRARY=../skia/out/Release-x64/skia.lib"
        
        # 如果找到了JPEG头文件和库，添加对应的参数
        if [ -n "$JPEG_INCLUDE_DIR" ]; then
          CMAKE_CMD="$CMAKE_CMD -DJPEG_INCLUDE_DIR=$JPEG_INCLUDE_DIR"
        fi
        
        if [ -n "$JPEG_LIBRARY" ]; then
          CMAKE_CMD="$CMAKE_CMD -DJPEG_LIBRARY=$JPEG_LIBRARY"
        fi
        
        echo "Running CMake command:"
        echo "$CMAKE_CMD"
        
        # 执行CMake命令
        eval $CMAKE_CMD

    # 8. 编译Aseprite
    - name: Build Aseprite
      shell: bash
      run: |
        cd build
        ninja aseprite

    # 9. 上传构建成果
    - name: Upload Aseprite Artifact
      uses: actions/upload-artifact@v4
      with:
        name: aseprite-windows-build
        path: |
          build/bin/aseprite.exe
          # 如果需要，可以添加其他相关文件
          # build/bin/data/
