name: Build Aseprite on Windows

on: [push, pull_request]

jobs:
  build-windows:
    runs-on: windows-2022

    steps:
    # 1. 检出代码及子模块
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    # 2. 安装构建工具
    - name: Install build tools
      run: |
        choco install cmake ninja -y
        choco install 7zip -y

    # 3. 设置MSVC开发环境
    - name: Setup MSVC environment
      uses: ilammy/msvc-dev-cmd@v1

    # 4. 下载Skia
    - name: Download Skia
      shell: bash
      run: |
        SKIA_URL="https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-Windows-Release-x64.zip"
        SKIA_ZIP="skia.zip"
        curl -L -o "$SKIA_ZIP" "$SKIA_URL"

    # 5. 解压Skia
    - name: Extract Skia
      shell: bash
      run: |
        7z x skia.zip -oskia -y
        echo "Skia 解压完成"

    # 6. 查找 libjpeg-turbo 头文件的实际位置
    - name: Find actual libjpeg-turbo header location
      shell: bash
      run: |
        echo "查找 libjpeg-turbo 头文件的实际位置..."
        
        LIBJPEG_DIR="skia/third_party/externals/libjpeg-turbo"
        
        echo "libjpeg-turbo 目录结构:"
        find "$LIBJPEG_DIR" -maxdepth 2 -type d | sort
        
        echo ""
        echo "在整个 Skia 目录中搜索 jpeg 头文件:"
        JPEG_HEADERS=$(find skia -name "jpeglib.h" -o -name "jerror.h" -o -name "jmorecfg.h" -o -name "jconfig.h" -o -name "turbojpeg.h")
        
        if [ -n "$JPEG_HEADERS" ]; then
          echo "找到以下 jpeg 头文件:"
          echo "$JPEG_HEADERS"
          
          # 获取第一个头文件的目录路径
          FIRST_HEADER=$(echo "$JPEG_HEADERS" | head -1)
          HEADER_DIR=$(dirname "$FIRST_HEADER")
          
          echo ""
          echo "第一个头文件路径: $FIRST_HEADER"
          echo "头文件目录: $HEADER_DIR"
          echo "该目录内容:"
          ls -la "$HEADER_DIR/"
          
          # 将路径保存到环境变量中供后续步骤使用
          echo "HEADER_DIR=$HEADER_DIR" >> $GITHUB_ENV
        else
          echo "错误: 未找到任何 jpeg 头文件"
          echo "Skia 目录结构:"
          find skia -name "*.h" | head -20
          exit 1
        fi

    # 7. 查找 libjpeg-turbo 库文件
    - name: Find libjpeg-turbo library
      shell: bash
      run: |
        echo "查找 libjpeg-turbo 库文件..."
        
        # 首先检查常见的库文件位置
        COMMON_LIB_PATHS=(
          "skia/out/Release-x64/libjpeg.lib"
          "skia/out/Release-x64/jpeg.lib"
          "skia/out/Release-x64/turbojpeg.lib"
          "skia/third_party/externals/libjpeg-turbo/libjpeg.lib"
        )
        
        LIB_PATH=""
        for path in "${COMMON_LIB_PATHS[@]}"; do
          if [ -f "$path" ]; then
            LIB_PATH="$path"
            echo "找到库文件: $LIB_PATH"
            break
          fi
        done
        
        # 如果没有在常见位置找到，则在整个目录中搜索
        if [ -z "$LIB_PATH" ]; then
          echo "在常见位置未找到库文件，开始全局搜索..."
          FOUND_LIBS=$(find skia -name "*jpeg*.lib" -o -name "*turbo*.lib" | head -5)
          if [ -n "$FOUND_LIBS" ]; then
            LIB_PATH=$(echo "$FOUND_LIBS" | head -1)
            echo "找到库文件: $LIB_PATH"
          else
            echo "警告: 未找到任何 libjpeg-turbo 库文件"
            # 继续执行，可能在配置阶段不需要库文件
          fi
        fi
        
        # 将库文件路径保存到环境变量
        if [ -n "$LIB_PATH" ]; then
          echo "LIB_PATH=$LIB_PATH" >> $GITHUB_ENV
        else
          echo "LIB_PATH=" >> $GITHUB_ENV
        fi

    # 8. 创建构建目录并配置CMake
    - name: Configure CMake
      shell: bash
      run: |
        mkdir -p build
        cd build
        
        echo "使用头文件目录: $HEADER_DIR"
        echo "使用库文件路径: $LIB_PATH"
        
        # 构建CMake命令
        CMAKE_CMD="cmake -G Ninja .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DLAF_BACKEND=skia \
          -DSKIA_DIR=../skia \
          -DSKIA_LIBRARY_DIR=../skia/out/Release-x64 \
          -DSKIA_LIBRARY=../skia/out/Release-x64/skia.lib \
          -DLIBJPEG_TURBO_INCLUDE_DIR=\"$HEADER_DIR\""
        
        # 如果找到了库文件，添加到CMake命令
        if [ -n "$LIB_PATH" ]; then
          CMAKE_CMD="$CMAKE_CMD -DLIBJPEG_TURBO_LIBRARY=\"$LIB_PATH\""
        fi
        
        echo "运行CMake命令: $CMAKE_CMD"
        eval $CMAKE_CMD

    # 9. 编译Aseprite
    - name: Build Aseprite
      shell: bash
      run: |
        cd build
        ninja aseprite

    # 10. 上传构建成果
    - name: Upload Aseprite Artifact
      uses: actions/upload-artifact@v4
      with:
        name: aseprite-windows-build
        path: build/bin/aseprite.exe
