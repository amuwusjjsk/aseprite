name: Build Aseprite on Windows

on: [push, pull_request]

jobs:
  build-windows:
    runs-on: windows-2022

    steps:
    # 1. 检出代码及子模块
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    # 2. 安装构建工具
    - name: Install build tools
      run: |
        choco install cmake ninja -y
        choco install 7zip -y

    # 3. 设置MSVC开发环境
    - name: Setup MSVC environment
      uses: ilammy/msvc-dev-cmd@v1

    # 4. 下载Skia
    - name: Download Skia
      shell: bash
      run: |
        SKIA_URL="https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-Windows-Release-x64.zip"
        SKIA_ZIP="skia.zip"
        curl -L -o "$SKIA_ZIP" "$SKIA_URL"

    # 5. 解压Skia
    - name: Extract Skia
      shell: bash
      run: |
        7z x skia.zip -oskia -y
        echo "Skia 解压完成"

    # 6. 查找 libjpeg-turbo 头文件的实际位置
    - name: Find actual libjpeg-turbo header location
      shell: bash
      run: |
        echo "查找 libjpeg-turbo 头文件的实际位置..."
        
        LIBJPEG_DIR="skia/third_party/externals/libjpeg-turbo"
        
        echo "libjpeg-turbo 目录结构:"
        find "$LIBJPEG_DIR" -maxdepth 2 -type d | sort
        
        echo ""
        echo "在整个 Skia 目录中搜索 jpeg 头文件:"
        JPEG_HEADERS=$(find skia -name "jpeglib.h" -o -name "jerror.h" -o -name "jmorecfg.h" -o -name "jconfig.h" -o -name "turbojpeg.h")
        
        if [ -n "$JPEG_HEADERS" ]; then
          echo "找到以下 jpeg 头文件:"
          echo "$JPEG_HEADERS"
          
          # 获取第一个头文件的目录路径
          FIRST_HEADER=$(echo "$JPEG_HEADERS" | head -1)
          HEADER_DIR=$(dirname "$FIRST_HEADER")
          
          echo ""
          echo "第一个头文件路径: $FIRST_HEADER"
          echo "头文件目录: $HEADER_DIR"
          echo "该目录内容:"
          ls -la "$HEADER_DIR/"
          
          # 将路径保存到环境变量中供后续步骤使用
          echo "HEADER_DIR=$HEADER_DIR" >> $GITHUB_ENV
        else
          echo "错误: 未找到任何 jpeg 头文件"
          echo "Skia 目录结构:"
          find skia -name "*.h" | head -20
          exit 1
        fi

    # 7. 修复 Aseprite 中的硬编码 libjpeg-turbo 路径
    - name: Fix hardcoded libjpeg-turbo path in Aseprite CMakeLists
      shell: bash
      run: |
        echo "修复 Aseprite CMakeLists.txt 中的硬编码路径..."
        
        # 备份原始文件
        cp src/CMakeLists.txt src/CMakeLists.txt.backup
        cp src/app/CMakeLists.txt src/app/CMakeLists.txt.backup
        
        echo "原始文件备份完成"
        
        # 修复 src/CMakeLists.txt - 替换所有硬编码的相对路径
        echo "修复 src/CMakeLists.txt..."
        sed -i 's|\.\./skia/third_party/externals/libjpeg-turbo|${SKIA_DIR}/third_party/externals/libjpeg-turbo|g' src/CMakeLists.txt
        
        # 修复 src/app/CMakeLists.txt - 替换所有硬编码的相对路径
        echo "修复 src/app/CMakeLists.txt..."
        sed -i 's|\.\./skia/third_party/externals/libjpeg-turbo|${SKIA_DIR}/third_party/externals/libjpeg-turbo|g' src/app/CMakeLists.txt
        
        echo "修复完成。修改内容："
        echo "src/CMakeLists.txt 中的相关行:"
        grep -n "libjpeg-turbo" src/CMakeLists.txt || echo "没有找到相关行"
        echo ""
        echo "src/app/CMakeLists.txt 中的相关行:"
        grep -n "libjpeg-turbo" src/app/CMakeLists.txt || echo "没有找到相关行"
        
        # 验证修改是否正确
        echo ""
        echo "验证修改:"
        if grep -q "\${SKIA_DIR}/third_party/externals/libjpeg-turbo" src/CMakeLists.txt src/app/CMakeLists.txt; then
          echo "✓ 修改成功，找到了替换后的路径"
        else
          echo "✗ 修改可能失败，未找到替换后的路径"
          echo "尝试恢复备份并重新检查..."
          cp src/CMakeLists.txt.backup src/CMakeLists.txt
          cp src/app/CMakeLists.txt.backup src/app/CMakeLists.txt
          echo "重新检查原始文件中的路径:"
          grep -n "\.\./skia/third_party/externals/libjpeg-turbo" src/CMakeLists.txt src/app/CMakeLists.txt
          exit 1
        fi

    # 8. 创建构建目录并配置CMake
    - name: Configure CMake
      shell: bash
      run: |
        mkdir -p build
        cd build
        
        echo "使用修复后的 CMakeLists.txt 进行配置..."
        echo "SKIA_DIR: ../skia"
        echo "头文件目录: $HEADER_DIR"
        
        # 使用修复后的配置
        cmake -G Ninja .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DLAF_BACKEND=skia \
          -DSKIA_DIR=../skia \
          -DSKIA_LIBRARY_DIR=../skia/out/Release-x64 \
          -DSKIA_LIBRARY=../skia/out/Release-x64/skia.lib

    # 9. 编译Aseprite
    - name: Build Aseprite
      shell: bash
      run: |
        cd build
        ninja aseprite

    # 10. 上传构建成果
    - name: Upload Aseprite Artifact
      uses: actions/upload-artifact@v4
      with:
        name: aseprite-windows-build
        path: build/bin/aseprite.exe

    # 11. 清理备份文件（可选）
    - name: Cleanup backup files
      shell: bash
      run: |
        rm -f src/CMakeLists.txt.backup src/app/CMakeLists.txt.backup
        echo "备份文件已清理"
